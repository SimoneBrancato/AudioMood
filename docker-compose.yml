version: '3'
services:

  kafka:
    image: bitnami/kafka:3.7.0
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
      - KAFKA_DELETE_TOPIC_ENABLE=true
    volumes:
      - ./kafka:/bitnami/kafka
    entrypoint: /bin/bash
    command: -c "rm -rf /bitnami/kafka/data/* && /opt/bitnami/scripts/kafka/entrypoint.sh /opt/bitnami/scripts/kafka/run.sh"

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: PLAINTEXT://kafka:9092

  spark:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark
    environment:
      - SPARK_ACTION=bash
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_DEPLOY_MODE=client
      - SPARK_APPLICATION_PYTHON_FILES=/opt/spark-app/spark_code.py
    volumes:
      - ./spark/code:/opt/spark-app
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 3g
    ports:
      - '8081:8080'
      - '7077:7077'
      - '4040:4040'
    depends_on:
      - producer
      - kafka
    command: spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0 --master local[*] /opt/spark-app/script.py
                                    
  init-kafka:
    image: bitnami/kafka:3.7.0
    container_name: init-kafka
    depends_on:
      kafka:
        condition: service_started
      kafka-ui:
        condition: service_started
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo 'Creating Kafka topic.'
      kafka-topics.sh --create --topic main --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --if-not-exists

      echo 'Successfully updated topic list:'
      kafka-topics.sh --list --bootstrap-server kafka:9092
      "

  logstash:
    build: 
      context: logstash/
      dockerfile: ./Dockerfile
    container_name: logstash
    environment:
      XPACK_MONITORING_ENABLED: "false"
      pipeline.ecs_compatibility: disabled
    ports:
      - 9700:9700
    expose:
      - 9700
    depends_on:
      - kafka
      - kafka-ui
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:9700 || exit 1"]
      interval: 20s
      timeout: 20s
      retries: 5

  producer:
    build:
      context: producer/
      dockerfile: ./Dockerfile
    image: audiomood_producer
    container_name: producer
    ports:
      - "5001:5001"
    depends_on:
      logstash:
        condition: service_healthy

  flask:
    container_name: flask
    build:
      context: app/
      dockerfile: ./Dockerfile
    image: flask
    ports:
      - "5000:5000"
    depends_on:
      producer:
        condition: service_started