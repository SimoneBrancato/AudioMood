version: '3'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - 8080:8080
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: PLAINTEXT://kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  init-kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: init-kafka
    depends_on:
      - kafka
      - zookeeper
      - kafka-ui
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic first --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  logstash:
    build: 
      context: logstash/
      dockerfile: ./Dockerfile
    container_name: logstash
    environment:
      XPACK_MONITORING_ENABLED: "false"
      pipeline.ecs_compatibility: disabled
    ports:
      - 9700:9700
    expose:
      - 9700
    depends_on:
      - kafka
      - zookeeper
      - kafka-ui
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:9700 || exit 1"]
      interval: 20s
      timeout: 20s
      retries: 5

  producer:
    build:
      context: producer/
      dockerfile: ./Dockerfile
    image: audiomood_producer
    container_name: producer
    ports:
      - "5001:5001"
    depends_on:
      logstash:
        condition: service_healthy

  flask:
    build:
      context: app/
      dockerfile: ./Dockerfile
    image: flask
    ports:
      - "5000:5000"
    depends_on:
      producer:
        condition: service_started